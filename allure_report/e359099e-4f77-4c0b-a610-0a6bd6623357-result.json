{"name": "test_assert_elements", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "wd = <selenium.webdriver.support.event_firing_webdriver.EventFiringWebDriver object at 0x0000025D7B177D08>\nopen_main_page = None\n\n    def test_assert_elements(wd, open_main_page):\n        main = Main(wd)\n>       main.find_elements()\n\ntest\\test_main_page.py:6: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmodels\\user\\main.py:22: in find_elements\n    self._wait_element(self.add_id(main.IN_CART, main.ID_MACBOOK))\nmodels\\base.py:100: in _wait_element\n    return self._wait(EC.visibility_of_element_located, selector)\nmodels\\base.py:94: in _wait\n    return wait.until(method((by, locator)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"fcc7283ae20a7a53ee73b2fd1dca7675\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x0000025D7B19A4C8>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException"}, "attachments": [{"name": "log", "source": "938512a6-3bde-42e8-9935-43a1e6ec0206-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "d0c0c22d-359c-4f1a-b006-67d80949dd30-attachment.txt", "type": "text/plain"}], "start": 1587236629297, "stop": 1587236639875, "uuid": "512f92c5-e236-4035-ad4f-50067721b052", "historyId": "a0c2651885a734e423ba56881e796b76", "testCaseId": "45c75089448f863442722660df1bf867", "fullName": "test.test_main_page#test_assert_elements", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_main_page"}, {"name": "host", "value": "AGS"}, {"name": "thread", "value": "6564-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_main_page"}]}